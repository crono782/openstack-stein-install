#############################################################
###### OPENSTACK STEIN RELEASE MULTI-NODE INSTALLATION ######
#############################################################
# Author: Daniel Queen
# URL: http://www.learnoss.com
# Date: 06/05/19
#############################################################
# NETWORKS:
#   - Mangement Network: 10.10.10.0/24 (default route, NAT)
#   - Tenant (Overlay) Network: 10.10.20.0/24
#   - Provider Network: 203.0.13.0/24
#   - Services Network: 172.16.0.0/24
# HOSTS: CentOS 7 minimal:
# controller:
#   - networks: management
#   - ips: 10.10.10.51
# compute:
#   - networks: management, tenant, provider, services
#   - ips: 10.10.10.52, 10.10.20.52, (none), (none)
#   - cpu: vmx extensions (nested virtualization or native)
# network:
#   - networks: management, tenant, provider, services
#   - ips: 10.10.10.53, 10.10.20.53, (none), (none)
# block:
#   - networks: management
#   - ips: 10.10.10.54
#   - disks: 4 extra disks (block storage)
# object:
#   - networks: management
#   - ips: 10.10.10.55
#   - disks: 3 extra disks (object storage)
# dbaas:
#   - networks: managememt, services
#   - ips: 10.10.10.56, 172.16.0.2
# share:
#   - networks: management, services
#   - ips: 10.10.10.57, 172.16.0.3
#############################################################
#############################################################

#######################
# - PART 0: SYSTEM PREP
#######################

#-------------
# => all nodes
#-------------

# set hostname

hostnamectl set-hostname <hostname>

# set up networks/ips
# use whatever method you like, but make sure they persist reboot

# stop services we don't want

for i in stop disable;do systemctl $i firewalld NetworkManager;done

# set host entries in lieu of DNS

cat << EOF >> /etc/hosts
10.10.10.51 controller
10.10.10.52 compute
10.10.10.53 network
10.10.10.54 block
10.10.10.55 object
10.10.10.56 dbaas
EOF

# set up NTP

if [ "$(hostname)" == "controller" ]; then
  sed -i 's/^#allow.*/allow 10.10.10.0/24' /etc/chrony.conf
else
  sed -i -e '/^server 0/i server controller iburst' -e '/^server [0-9]/d' /etc/chrony.conf
fi

systemctl restart chronyd

# install base openstack packages

yum -y install centos-release-openstack-stein
yum -y update
yum -y install python-openstackclient openstack-selinux

# create some helper scripts

# backs up conf files and removes comments for a clean slate

cat << EOF > bak.sh
#!/bin/sh
filepath=\$1
cp \$filepath \$filepath.bak
grep '^[^#$]' \$filepath.bak > \$filepath
EOF

chmod +x bak.sh

# helper for adding key/value pairs and sections to conf file

cat << EOF > conf.sh
#!/bin/bash
file=\$1
section=\$2
key=\$3
shift;shift;shift
value="\$@"
if [ "\$(grep -c "^\[\$section\]" \$file)" -lt 1  ]; then
  echo [\$section] >> \$file
fi
if [ ! -z "\$(sed -n "/\[\$section\]/,/\[/{/^\$key =.*/=}" \$file)" ]; then
  sed -i "/\[\$section\]/,/\[/{s/\$key[ =].*/\$key = \$value/}" \$file
else
  sed -i "/^\[\$section\]/a \$key = \$value" \$file
fi
EOF

chmod +x conf.sh

# reboot node so any kernel updates and name change take full effect

reboot now

###########################
# - PART 1: CONTROLLER PREP
###########################

#-------------------
# => controller node
#-------------------

# make some controller specific helper scripts

# script for adding service endpoints

cat << EOF > endpoint.sh
#!/bin/bash
eptype=\$1
epport=\$2
ephost=\${3:-controller}
for i in public internal admin; do openstack endpoint create --region RegionOne \$eptype \$i http://\$ephost:$epport;done
EOF

chmod +x endpoint.sh

# script for creating mysql project dbs

cat << EOF > dbcreate.sh
#!/bin/bash
dbname=\$1
dbuser=\$2
pass=\$3
cat << EOS > ~/.sqlfiles/\$dbname-\$dbuser.sql
CREATE DATABASE \$dbname;
GRANT ALL PRIVILEGES ON \$dbname.* TO '\$dbuser'@'localhost' IDENTIFIED BY '\$pass';
GRANT ALL PRIVILEGES ON \$dbname.* TO '\$dbuser'@'%' IDENTIFIED BY '\$pass';
EOS
mysql -u root -ppassword < ~/.sqlfiles/\$dbname-\$dbuser.sql
EOF

chmod +x dbcreate.sh

# create basic rc files

# rc file for admin user

cat << EOF > adminrc
black=\$(tput setaf 0)
red=\$(tput setaf 1)
green=\$(tput setaf 2)
yellow=\$(tput setaf 3)
blue=\$(tput setaf 4)
magenta=\$(tput setaf 5)
cyan=\$(tput setaf 6)
white=\$(tput setaf 7)
reset=\$(tput sgr0)
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD=password
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
export PS1='[\u@\h \[\$red\](\$OS_USERNAME:\$OS_PROJECT_NAME)\[\$reset\] \W]\$ '
EOF

# rc file to reset settings

cat << EOF > norc
unset OS_PROJECT_DOMAIN_NAME
unset OS_USER_DOMAIN_NAME
unset OS_PROJECT_NAME
unset OS_USERNAME
unset OS_PASSWORD
unset OS_AUTH_URL
unset OS_IDENTITY_API_VERSION
unset OS_IMAGE_API_VERSION
export PS1='[\u@\h \W]\$ '
EOF

# set up SSH keys for convenience

ssh-keygen -t rsa -N '' -f ~/.ssh/id_rsa

for i in controller compute network block object dbaas;do ssh-copy-id -o StrictHostKeyChecking=no $i;done

# install/setup mysql database

yum -y install mariadb mariadb-server python2-PyMySQL

cat << EOF > /etc/my.cnf.d/openstack.cnf
[mysqld]
bind-address = 10.10.10.51
default-storage-engine = innodb
innodb_file_per_table = on
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8
EOF

for i in enable start;do systemctl $i mariadb;done

# manual mysql setup (not using this currently)

#mysql_secure_installation

# auto mysql setup (using this instead)

mysql -e "UPDATE mysql.user SET Password = PASSWORD('password') WHERE User = 'root'"
mysql -e "DROP USER ''@'localhost'"
mysql -e "DROP USER ''@'$(hostname)'"
mysql -e "DROP DATABASE test"
mysql -e "FLUSH PRIVILEGES"

mkdir ~/.sqlfiles # << for dbcreate script usage

# install/stup message queue

yum -y install rabbitmq-server

for i in enable start;do systemctl $i rabbitmq-server;done

rabbitmqctl add_user openstack password

rabbitmqctl set_permissions openstack ".*" ".*" ".*"

# install/setup memcached

yum -y install memcached python-memcached

sed -i 's/OPTIONS="-l 127.0.0.1,::1"/OPTIONS="-l 127.0.0.1,::1,controller"/' /etc/sysconfig/memcached

for i in enable start;do systemctl $i memcached;done

# install/setup etcd

yum -y install etcd

sed -r -e '/(ETCD_LISTEN|ETCD_INITIAL)/ s/^#//' -e 's/localhost/10.10.10.51/g' -e '/(ETCD_NAME|ETCD_INITIAL)/ s/default/controller/' -e 's/(etcd-cluster)/\1-01/' /etc/etcd/etcd.conf

for i in enable start;do systemctl $i etcd;done

#################################
# - PART 2: KEYSTONE INSTALLATION
#################################

#-------------------
# => controller node
#-------------------

# create keystone database

./dbcreate.sh keystone keystone password

# install packages

yum -y install openstack-keystone httpd mod_wsgi

# conf file work
./bak.sh /etc/keystone/keystone.conf

./conf.sh /etc/keystone/keystone.conf database connection mysql+pymysql://keystone:password@controller/keystone
./conf.sh /etc/keystone/keystone.conf token provider fernet

# sync database

su -s /bin/sh -c "keystone-manage db_sync" keystone

# initialize fernet

keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone

keystone-manage credential_setup --keystone-user keystone --keystone-group keystone

# bootstrap keystone

keystone-manage bootstrap --bootstrap-password password \
  --bootstrap-admin-url http://controller:5000/v3/ \
  --bootstrap-internal-url http://controller:5000/v3/ \
  --bootstrap-public-url http://controller:5000/v3/ \
  --bootstrap-region-id RegionOne

# setup/initialize apache/wsgi
sed -i 's/^#ServerName.*/ServerName controller/' /etc/httpd/conf/httpd.conf

ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/

for i in enable start;do systemctl $i httpd;done

# create basic projects and roles

source ~/adminrc

openstack project create --domain default --description "Service Project" service

openstack project create --domain default --description "Learnoss Project" learnoss

openstack user create --domain default --password password dqueen

if [ "$(openstack role list -c Name -f value|grep -c '^member$')" > 0 ]; then openstack role create member;fi

openstack role add --project learnoss --user dqueen member

cp ~/adminrc ~/dqueenrc

sed -i -e '/OS_PROJECT_NAME/ s/admin/learnoss/'\
 -e '/OS_USERNAME/ s/admin/dqueen/'\
 -e '/OS_PASSWORD/ s/password/password/'\
 -e '/PS1/ s/$red/$yellow/' ~/dqueenrc



###############################
# - PART 3: GLANCE INSTALLATION
###############################

#-------------------
# => controller node
#-------------------

# create glance database

./dbcreate.sh glance glance password

# create user, add role, create service, create endpoints

source ~/adminrc

openstack user create --domain default --password password glance

openstack role add --project service --user glance admin

openstack service create --name glance --description "OpenStack Image" image

./endpoint.sh image 9292

# install packages

yum -y install openstack-glance

# conf file work

./bak.sh /etc/glance/glance-api.conf

./conf.sh /etc/glance/glance-api.conf database connection mysql+pymysql://glance:password@controller/glance
./conf.sh /etc/glance/glance-api.conf keystone_authtoken www_authenticate_uri http://controller:5000
./conf.sh /etc/glance/glance-api.conf keystone_authtoken auth_url http://controller:5000
./conf.sh /etc/glance/glance-api.conf keystone_authtoken memcached_servers controller:11211
./conf.sh /etc/glance/glance-api.conf keystone_authtoken auth_type password
./conf.sh /etc/glance/glance-api.conf keystone_authtoken project_domain_name Default
./conf.sh /etc/glance/glance-api.conf keystone_authtoken user_domain_name Default
./conf.sh /etc/glance/glance-api.conf keystone_authtoken project_name service
./conf.sh /etc/glance/glance-api.conf keystone_authtoken username glance
./conf.sh /etc/glance/glance-api.conf keystone_authtoken password password
./conf.sh /etc/glance/glance-api.conf glance_store stores file,http
./conf.sh /etc/glance/glance-api.conf glance_store default_store file
./conf.sh /etc/glance/glance-api.conf glance_store filesystem_store_datadir /var/lib/glance/images/
./conf.sh /etc/glance/glance-api.conf paste_deploy flavor keystone

./bak.sh /etc/glance/glance-registry.conf

./conf.sh /etc/glance/glance-api.conf database connection mysql+pymysql://glance:password@controller/glance
./conf.sh /etc/glance/glance-api.conf keystone_authtoken www_authenticate_uri http://controller:5000
./conf.sh /etc/glance/glance-api.conf keystone_authtoken auth_url http://controller:5000
./conf.sh /etc/glance/glance-api.conf keystone_authtoken memcached_servers controller:11211
./conf.sh /etc/glance/glance-api.conf keystone_authtoken auth_type password
./conf.sh /etc/glance/glance-api.conf keystone_authtoken project_domain_name Default
./conf.sh /etc/glance/glance-api.conf keystone_authtoken user_domain_name Default
./conf.sh /etc/glance/glance-api.conf keystone_authtoken project_name service
./conf.sh /etc/glance/glance-api.conf keystone_authtoken username glance
./conf.sh /etc/glance/glance-api.conf keystone_authtoken password password
./conf.sh /etc/glance/glance-api.conf paste_deploy flavor keystone

# sync database and start services

su -s /bin/sh -c "glance-manage db_sync" glance

for i in enable start;do systemctl $i openstack-glance-{api,registry};done

# download cirros test image and upload to glance for verification

yum -y install wget

wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img

openstack image create "cirros" --file cirros-0.4.0-x86_64-disk.img --disk-format qcow2 --container-format bare --public

rm -f cirros-0.4.0-x86_64-disk.img

##################################
# - PART 4: PLACEMENT INSTALLATION
##################################

### NOTE #########################################################
# The placement service was split from nova in the Stein release
# It is now its own service with its own config files and services
##################################################################

#-------------------
# => controller node
#-------------------

# create placement database

./dbcreate.sh placement placement password

# create user, add role, create service and endpoints

openstack user create --domain default --password password placement

openstack role add --project service --user placement admin

openstack service create --name placement --description "Placement API" placement

./endpoint.sh placement 8778

# install packages

yum -y install openstack-placement-api

# conf file work

./bak.sh /etc/placement/placement.conf

./conf.sh /etc/placement/placement.conf api auth_strategy keystone
./conf.sh /etc/placement/placement.conf placement_database connection mysql+pymysql://placement:password@controller/placement
./conf.sh /etc/placement/placement.conf keystone_authtoken auth_url http://controller:5000/v3
./conf.sh /etc/placement/placement.conf keystone_authtoken memcached_servers controller:11211
./conf.sh /etc/placement/placement.conf keystone_authtoken auth_type password
./conf.sh /etc/placement/placement.conf keystone_authtoken project_domain_name Default
./conf.sh /etc/placement/placement.conf keystone_authtoken user_domain_name Default
./conf.sh /etc/placement/placement.conf keystone_authtoken project_name service
./conf.sh /etc/placement/placement.conf keystone_authtoken username placement
./conf.sh /etc/placement/placement.conf keystone_authtoken password password

# add config to apache conf. packaging bug still misses this part

cat << EOF >> /etc/httpd/conf.d/00-placement-api.conf
<Directory /usr/bin>
    <IfVersion >= 2.4>
        Require all granted
    </IfVersion>
    <IfVersion < 2.4>
        Order allow,deny
        Allow from all
    </IfVersion>
</Directory>
EOF

# sync database and restart apache

su -s /bin/sh -c "placement-manage db sync" placement

systemctl restart httpd

# some verification tests

openstack --os-placement-api-version 1.2 resource class list --sort-column name
openstack --os-placement-api-version 1.6 trait list --sort-column name

#############################
# - PART 5: NOVA INSTALLATION
#############################

#-------------------
# => controller node
#-------------------

# create nova databases

./dbcreate.sh nova_api nova password
./dbcreate.sh nova nova password
./dbcreate.sh nova_cell0 nova password

# create user, add role, create service and endpoints

source ~/adminrc

openstack user create --domain default --password password nova

openstack role add --project service --user nova admin

openstack service create --name nova --description "OpenStack Compute" compute

./endpoint.sh compute 8774/v2.1

# install packages

yum -y install openstack-nova-api openstack-nova-conductor openstack-nova-novncproxy openstack-nova-scheduler

# conf file work

./bak.sh /etc/nova/nova.conf

./conf.sh /etc/nova/nova.conf DEFAULT enabled_apis osapi_compute,metadata
./conf.sh /etc/nova/nova.conf DEFAULT my_ip 10.10.10.51
./conf.sh /etc/nova/nova.conf DEFAULT use_neutron true
./conf.sh /etc/nova/nova.conf DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver
./conf.sh /etc/nova/nova.conf DEFAULT transport_url rabbit://openstack:password@controller
./conf.sh /etc/nova/nova.conf api auth_strategy keystone
./conf.sh /etc/nova/nova.conf api_database connection mysql+pymysql://nova:password@controller/nova_api
./conf.sh /etc/nova/nova.conf database connection mysql+pymysql://nova:password@controller/nova
./conf.sh /etc/nova/nova.conf glance api_servers http://controller:9292
./conf.sh /etc/nova/nova.conf keystone_authtoken auth_url http://controller:5000/v3
./conf.sh /etc/nova/nova.conf keystone_authtoken memcached_servers controller:11211
./conf.sh /etc/nova/nova.conf keystone_authtoken auth_type password
./conf.sh /etc/nova/nova.conf keystone_authtoken project_domain_name Default
./conf.sh /etc/nova/nova.conf keystone_authtoken user_domain_name Default
./conf.sh /etc/nova/nova.conf keystone_authtoken project_name service
./conf.sh /etc/nova/nova.conf keystone_authtoken username nova
./conf.sh /etc/nova/nova.conf keystone_authtoken password password
./conf.sh /etc/nova/nova.conf oslo_concurrency lock_path /var/lib/nova/tmp
./conf.sh /etc/nova/nova.conf placement region_name RegionOne
./conf.sh /etc/nova/nova.conf placement project_domain_name Default
./conf.sh /etc/nova/nova.conf placement project_name service
./conf.sh /etc/nova/nova.conf placement auth_type password
./conf.sh /etc/nova/nova.conf placement user_domain_name Default
./conf.sh /etc/nova/nova.conf placement auth_url http://controller:5000/v3
./conf.sh /etc/nova/nova.conf placement username placement
./conf.sh /etc/nova/nova.conf placement password password
./conf.sh /etc/nova/nova.conf vnc enabled true
# single quote '$my_ip' so bash doesn't try to interpret it
./conf.sh /etc/nova/nova.conf vnc server_listen '$my_ip'
./conf.sh /etc/nova/nova.conf vnc server_proxyclient_address '$my_ip'

# sync/build databases and start services

su -s /bin/sh -c "nova-manage api_db sync" nova

su -s /bin/sh -c "nova-manage cell_v2 map_cell0" nova

su -s /bin/sh -c "nova-manage cell_v2 create_cell --name=cell1 --verbose" nova

su -s /bin/sh -c "nova-manage db sync" nova

su -s /bin/sh -c "nova-manage cell_v2 list_cells" nova

for i in enable start;do systemctl $i openstack-nova-{api,scheduler,conductor,novncproxy};done

#----------------
# => compute node
#----------------

# install packages

yum -y install openstack-nova-compute

# conf file work

./bak.sh /etc/nova/nova.conf

./conf.sh /etc/nova/nova.conf DEFAULT enabled_apis osapi_compute,metadata
./conf.sh /etc/nova/nova.conf DEFAULT my_ip 10.10.10.52
./conf.sh /etc/nova/nova.conf DEFAULT use_neutron true
./conf.sh /etc/nova/nova.conf DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver
./conf.sh /etc/nova/nova.conf DEFAULT transport_url rabbit://openstack:password@controller
./conf.sh /etc/nova/nova.conf api auth_strategy keystone
./conf.sh /etc/nova/nova.conf glance api_servers http://controller:9292
./conf.sh /etc/nova/nova.conf keystone_authtoken auth_url http://controller:5000/v3
./conf.sh /etc/nova/nova.conf keystone_authtoken memcached_servers controller:11211
./conf.sh /etc/nova/nova.conf keystone_authtoken auth_type password
./conf.sh /etc/nova/nova.conf keystone_authtoken project_domain_name Default
./conf.sh /etc/nova/nova.conf keystone_authtoken user_domain_name Default
./conf.sh /etc/nova/nova.conf keystone_authtoken project_name service
./conf.sh /etc/nova/nova.conf keystone_authtoken username nova
./conf.sh /etc/nova/nova.conf keystone_authtoken password password
./conf.sh /etc/nova/nova.conf oslo_concurrency lock_path /var/lib/nova/tmp
./conf.sh /etc/nova/nova.conf placement region_name RegionOne
./conf.sh /etc/nova/nova.conf placement project_domain_name Default
./conf.sh /etc/nova/nova.conf placement project_name service
./conf.sh /etc/nova/nova.conf placement auth_type password
./conf.sh /etc/nova/nova.conf placement user_domain_name Default
./conf.sh /etc/nova/nova.conf placement auth_url http://controller:5000/v3
./conf.sh /etc/nova/nova.conf placement username placement
./conf.sh /etc/nova/nova.conf placement password password
./conf.sh /etc/nova/nova.conf vnc enabled true
./conf.sh /etc/nova/nova.conf vnc server_listen 0.0.0.0
# single quote '$my_ip' so bash doesn't try to interpret it
./conf.sh /etc/nova/nova.conf vnc server_proxyclient_address '$my_ip'
./conf.sh /etc/nova/nova.conf vnc novncproxy_base_url http://controller:6080/vnc_auto.html

# start services

for i in enable start;do systemctl $i libvirtd openstack-nova-compute;done

#-------------------
# => controller node
#-------------------

# discover compute hosts

source ~/adminrc

openstack compute service list --service nova-compute

su -s /bin/sh -c "nova-manage cell_v2 discover_hosts --verbose" nova

# do some verifications

openstack compute service list

openstack catalog list

openstack image list

nova-status upgrade check

################################
# - PART 5: NEUTRON INSTALLATION
################################

#-------------------
# => controller node
#-------------------

# create neutron database

./dbcreate.sh neutron neutron password

# create user, add role, create service and endpoints

source ~/adminrc

openstack user create --domain default --password password neutron

openstack role add --project service --user neutron admin

openstack service create --name neutron --description "OpenStack Networking" network

./endpoint.sh network 9696

# install packages

yum -y install openstack-neutron openstack-neutron-ml2

# conf file work

./bak.sh /etc/neutron/neutron.conf

./conf.sh /etc/neutron/neutron.conf database connection mysql+pymysql://neutron:password@controller/neutron
./conf.sh /etc/neutron/neutron.conf DEFAULT core_plugin ml2
./conf.sh /etc/neutron/neutron.conf DEFAULT service_plugins router
./conf.sh /etc/neutron/neutron.conf DEFAULT allow_overlapping_ips true
./conf.sh /etc/neutron/neutron.conf DEFAULT transport_url rabbit://openstack:password@controller
./conf.sh /etc/neutron/neutron.conf DEFAULT auth_strategy keystone
./conf.sh /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_status_changes true
./conf.sh /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_data_changes true
./conf.sh /etc/neutron/neutron.conf keystone_authtoken www_authenticate_uri http://controller:5000
./conf.sh /etc/neutron/neutron.conf keystone_authtoken auth_url http://controller:5000
./conf.sh /etc/neutron/neutron.conf keystone_authtoken memcached_servers controller:11211
./conf.sh /etc/neutron/neutron.conf keystone_authtoken auth_type password
./conf.sh /etc/neutron/neutron.conf keystone_authtoken project_domain_name default
./conf.sh /etc/neutron/neutron.conf keystone_authtoken user_domain_name default
./conf.sh /etc/neutron/neutron.conf keystone_authtoken project_name service
./conf.sh /etc/neutron/neutron.conf keystone_authtoken username neutron
./conf.sh /etc/neutron/neutron.conf keystone_authtoken password password
./conf.sh /etc/neutron/neutron.conf nova auth_url http://controller:5000
./conf.sh /etc/neutron/neutron.conf nova auth_type password
./conf.sh /etc/neutron/neutron.conf nova project_domain_name default
./conf.sh /etc/neutron/neutron.conf nova user_domain_name default
./conf.sh /etc/neutron/neutron.conf nova region_name RegionOne
./conf.sh /etc/neutron/neutron.conf nova project_name service
./conf.sh /etc/neutron/neutron.conf nova username nova
./conf.sh /etc/neutron/neutron.conf nova password password
./conf.sh /etc/neutron/neutron.conf oslo_concurrency lock_path /var/lib/neutron/tmp

./bak.sh /etc/neutron/plugins/ml2/ml2_conf.ini

./conf.sh /etc/neutron/plugins/ml2/ml2_conf.ini ml2 type_drivers flat,vlan,vxlan
./conf.sh /etc/neutron/plugins/ml2/ml2_conf.ini ml2 tenant_network_types vxlan
./conf.sh /etc/neutron/plugins/ml2/ml2_conf.ini ml2 mechanism_drivers openvswitch,l2population
./conf.sh /etc/neutron/plugins/ml2/ml2_conf.ini ml2 extension_drivers port_security
./conf.sh /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_flat flat_networks provider
./conf.sh /etc/neutron/plugins/ml2/ml2_conf.ini ml2_type_vxlan vni_ranges 1:1000
./conf.sh /etc/neutron/plugins/ml2/ml2_conf.ini securitygroup enable_ipset true


./conf.sh /etc/nova/nova.conf neutron url http://controller:9696
./conf.sh /etc/nova/nova.conf neutron auth_url http://controller:5000
./conf.sh /etc/nova/nova.conf neutron auth_type password
./conf.sh /etc/nova/nova.conf neutron project_domain_name default
./conf.sh /etc/nova/nova.conf neutron user_domain_name default
./conf.sh /etc/nova/nova.conf neutron region_name RegionOne
./conf.sh /etc/nova/nova.conf neutron project_name service
./conf.sh /etc/nova/nova.conf neutron username neutron
./conf.sh /etc/nova/nova.conf neutron password password
./conf.sh /etc/nova/nova.conf neutron service_metadata_proxy true
./conf.sh /etc/nova/nova.conf neutron metadata_proxy_shared_secret metasecret

# link plugin.ini
ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini

# populate database
su -s /bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron

# restart nova api
systemctl restart openstack-nova-api

# start service
for i in enable start;do systemctl $i neutron-server;done

#----------------
# => network node
#----------------

# install packages

yum -y install openstack-neutron openstack-neutron-openvswitch libibverbs ebtables

# init openvswitch

for i in enable start;do systemctl $i openvswitch;done

# create provider bridge

ovs-vsctl add-br br-provider
ovs-vsctl add-port eth2 br-provider

# create provider bridge network script

cat << EOF > /etc/sysconfig/network-scripts/ifcfg-br-provider
TYPE="OVSBridge"
BOOTPROTO="none"
DEFROUTE="no"
IPV6INIT="no"
NAME="br-provider"
DEVICE="br-provider"
DEVICETYPE="ovs"
ONBOOT="yes"
EOF

# reconfigure interface network script

sed -i -e 's/^TYPE=.*/TYPE="OVSPort"/' -e '/^HWADDR/d' /etc/sysconfig/network-scripts/ifcfg-eth2
cat << EOF >> /etc/sysconfig/network-scripts/ifcfg-eth2
DEVICETYPE="ovs"
OVS_BRIDGE="br-provider"
EOF

# reset bridge and port
ifdown br-provider
ifdown eth2
ifup br-provider
ifup eth2

# quick verification

ovs-vsctl show

# conf file work

./bak.sh /etc/neutron/neutron.conf

./conf.sh /etc/neutron/neutron.conf DEFAULT core_plugin ml2
./conf.sh /etc/neutron/neutron.conf DEFAULT service_plugins router
./conf.sh /etc/neutron/neutron.conf DEFAULT allow_overlapping_ips true
./conf.sh /etc/neutron/neutron.conf DEFAULT transport_url rabbit://openstack:password@controller
./conf.sh /etc/neutron/neutron.conf DEFAULT auth_strategy keystone
./conf.sh /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_status_changes true
./conf.sh /etc/neutron/neutron.conf DEFAULT notify_nova_on_port_data_changes true
./conf.sh /etc/neutron/neutron.conf keystone_authtoken www_authenticate_uri http://controller:5000
./conf.sh /etc/neutron/neutron.conf keystone_authtoken auth_url http://controller:5000
./conf.sh /etc/neutron/neutron.conf keystone_authtoken memcached_servers controller:11211
./conf.sh /etc/neutron/neutron.conf keystone_authtoken auth_type password
./conf.sh /etc/neutron/neutron.conf keystone_authtoken project_domain_name default
./conf.sh /etc/neutron/neutron.conf keystone_authtoken user_domain_name default
./conf.sh /etc/neutron/neutron.conf keystone_authtoken project_name service
./conf.sh /etc/neutron/neutron.conf keystone_authtoken username neutron
./conf.sh /etc/neutron/neutron.conf keystone_authtoken password password
./conf.sh /etc/neutron/neutron.conf oslo_concurrency lock_path /var/lib/neutron/tmp

./bak.sh /etc/neutron/plugins/ml2/openvswitch_agent.ini

./conf.sh /etc/neutron/plugins/ml2/openvswitch_agent.ini ovs bridge_mappings provider:br-provider
./conf.sh /etc/neutron/plugins/ml2/openvswitch_agent.ini ovs local_ip 10.10.20.53
./conf.sh /etc/neutron/plugins/ml2/openvswitch_agent.ini agent tunnel_types vxlan
./conf.sh /etc/neutron/plugins/ml2/openvswitch_agent.ini agent l2_population True
./conf.sh /etc/neutron/plugins/ml2/openvswitch_agent.ini securitygroup firewall_driver iptables_hybrid

./bak.sh /etc/neutron/l3_agent.ini

./conf.sh /etc/neutron/l3_agent.ini DEFAULT interface_driver openvswitch
# empty quotes so we get a intentionally blank value
./conf.sh /etc/neutron/l3_agent.ini DEFAULT external_network_bridge ''

./bak.sh /etc/neutron/dhcp_agent.ini

./conf.sh /etc/neutron/dhcp_agent.ini DEFAULT interface_driver openvswitch
./conf.sh /etc/neutron/dhcp_agent.ini DEFAULT dhcp_driver neutron.agent.linux.dhcp.Dnsmasq
./conf.sh /etc/neutron/dhcp_agent.ini DEFAULT enable_isolated_metadata true

./bak.sh /etc/neutron/metadata_agent.ini

./conf.sh /etc/neutron/metadata_agent.ini DEFAULT nova_metadata_host controller
./conf.sh /etc/neutron/metadata_agent.ini DEFAULT metadata_proxy_shared_secret metasecret

# start services

for i in enable start;do systemctl $i neutron-{openvswitch,dhcp,metadata,l3}-agent;done

#----------------
# => compute node
#----------------

# install packages

yum -y install openstack-neutron-openvswitch ebtables ipset

# init openvswitch

for i in enable start;do systemctl $i openvswitch;done

./bak.sh /etc/neutron/neutron.conf

./conf.sh /etc/neutron/neutron.conf DEFAULT transport_url rabbit://openstack:password@controller
./conf.sh /etc/neutron/neutron.conf DEFAULT auth_strategy keystone
./conf.sh /etc/neutron/neutron.conf keystone_authtoken www_authenticate_uri http://controller:5000
./conf.sh /etc/neutron/neutron.conf keystone_authtoken auth_url http://controller:5000
./conf.sh /etc/neutron/neutron.conf keystone_authtoken memcached_servers controller:11211
./conf.sh /etc/neutron/neutron.conf keystone_authtoken auth_type password
./conf.sh /etc/neutron/neutron.conf keystone_authtoken project_domain_name default
./conf.sh /etc/neutron/neutron.conf keystone_authtoken user_domain_name default
./conf.sh /etc/neutron/neutron.conf keystone_authtoken project_name service
./conf.sh /etc/neutron/neutron.conf keystone_authtoken username neutron
./conf.sh /etc/neutron/neutron.conf keystone_authtoken password password
./conf.sh /etc/neutron/neutron.conf oslo_concurrency lock_path /var/lib/neutron/tmp

./bak.sh /etc/neutron/plugins/ml2/openvswitch_agent.ini

./conf.sh /etc/neutron/plugins/ml2/openvswitch_agent.ini ovs local_ip 10.10.20.52
./conf.sh /etc/neutron/plugins/ml2/openvswitch_agent.ini agent tunnel_types vxlan
./conf.sh /etc/neutron/plugins/ml2/openvswitch_agent.ini agent l2_population True

./conf.sh /etc/nova/nova.conf neutron url http://controller:9696
./conf.sh /etc/nova/nova.conf neutron auth_url http://controller:5000
./conf.sh /etc/nova/nova.conf neutron auth_type password
./conf.sh /etc/nova/nova.conf neutron project_domain_name default
./conf.sh /etc/nova/nova.conf neutron user_domain_name default
./conf.sh /etc/nova/nova.conf neutron region_name RegionOne
./conf.sh /etc/nova/nova.conf neutron project_name service
./conf.sh /etc/nova/nova.conf neutron username neutron
./conf.sh /etc/nova/nova.conf neutron password password

systemctl restart openstack-nova-compute

for i in enable start;do systemctl $i neutron-openvswitch-agent;done

#-------------------
# => controller node
#-------------------

# verification (should show 4 agents on network node and 1 on each compute) 

source ~/adminrc

openstack network agent list

################################
# - PART 6: HORIZON INSTALLATION
################################

#-------------------
# => controller node
#-------------------

# install packages

yum -y install openstack-dashboard

# config work

cp -p /etc/openstack-dashboard/local_settings /etc/openstack-dashboard/local_settings.bkp

sed -i 's/^OPENSTACK_HOST.*/OPENSTACK_HOST = "controller"/' /etc/openstack-dashboard/local_settings
sed -i "s/^ALLOWED_HOSTS.*/ALLOWED_HOSTS = ['*']/" /etc/openstack-dashboard/local_settings
sed -i '/^#CACHES/,/\}$/{s/^#//;s/127.0.0.1/controller/}' /etc/openstack-dashboard/local_settings
sed -i "s/#\+SESSION_ENGINE.*/SESSION_ENGINE = 'django.contrib.sessions.backends.cache'/" /etc/openstack-dashboard/local_settings 
sed -i '/OPENSTACK_API_VERSIONS/,/\}/{/compute/! s/^#//}' /etc/openstack-dashboard/local_settings
sed -i 's/^OPENSTACK_KEYSTONE_DEFAULT_ROLE.*/OPENSTACK_KEYSTONE_DEFAULT_ROLE = "member"/' /etc/openstack-dashboard/local_settings

sed -i '1iWSGIApplicationGroup %{GLOBAL}' /etc/httpd/conf.d/openstack-dashboard.conf 

# restart services

systemctl restart httpd memcached

###############################
# - PART 7: CINDER INSTALLATION
###############################

#-------------------
# => controller node
#-------------------

# create cinder database

./dbcreate.sh cinder cinder password

# create user, add role, create services and endpoints

source ~/adminrc

openstack user create --domain default --password password cinder

openstack role add --project service --user cinder admin

openstack service create --name cinderv2 --description "OpenStack Block Storage" volumev2

openstack service create --name cinderv3 --description "OpenStack Block Storage" volumev3

./endpoint.sh volumev2 8776/v2/%\(project_id\)s

./endpoint.sh volumev3 8776/v3/%\(project_id\)s

# install packages

yum -y install openstack-cinder

# conf file work

./bak.sh /etc/cinder/cinder.conf

./conf.sh /etc/cinder/cinder.conf database connection mysql+pymysql://cinder:password@controller/cinder
./conf.sh /etc/cinder/cinder.conf DEFAULT transport_url rabbit://openstack:password@controller
./conf.sh /etc/cinder/cinder.conf DEFAULT auth_strategy keystone
./conf.sh /etc/cinder/cinder.conf DEFAULT my_ip 10.10.10.51
./conf.sh /etc/cinder/cinder.conf keystone_authtoken www_authenticate_uri http://controller:5000
./conf.sh /etc/cinder/cinder.conf keystone_authtoken auth_url http://controller:5000
./conf.sh /etc/cinder/cinder.conf keystone_authtoken memcached_servers controller:11211
./conf.sh /etc/cinder/cinder.conf keystone_authtoken auth_type password
./conf.sh /etc/cinder/cinder.conf keystone_authtoken project_domain_name default
./conf.sh /etc/cinder/cinder.conf keystone_authtoken user_domain_name default
./conf.sh /etc/cinder/cinder.conf keystone_authtoken project_name service
./conf.sh /etc/cinder/cinder.conf keystone_authtoken username cinder
./conf.sh /etc/cinder/cinder.conf keystone_authtoken password password
./conf.sh /etc/cinder/cinder.conf oslo_concurrency lock_path /var/lib/cinder/tmp

# populate database

su -s /bin/sh -c "cinder-manage db sync" cinder

# configure nova to use cinder

./conf.sh /etc/nova/nova.conf cinder os_region_name RegionOne

# restart compute service

systemctl restart openstack-nova-api

# enable and start services

for i in enable start;do systemctl $i openstack-cinder-{api,scheduler};done

#--------------
# => block node
#--------------

# make sure packages are installed

yum -y install lvm2 device-mapper-persistent-data

# make sure services are enabled and started

for i in enable start; do systemctl $i lvm2-lvmetad;done

# create LVM PVs

pvcreate /dev/vd{b,c,d,e}

# create VG to simulate SSD storage

vgcreate cindervols-ssd /dev/vd{b,c}

# create VG to simulate HDD storage

vgcreate cindervols-hdd /dev/vd{d,e}

# apply device filters to LVM

l=$(sed -n '/# filter = /=' /etc/lvm/lvm.conf|tail -n1);sed -i "${l}a filter = [ 'a|vda|','a|vdb|','a|vdc|','a|vdd|','a|vde|','r|.*|' ]" /etc/lvm/lvm.conf

# install packages

yum -y install openstack-cinder targetcli python-keystone

# conf file work

./bak.sh /etc/cinder/cinder.conf

./conf.sh /etc/cinder/cinder.conf database connection mysql+pymysql://cinder:password@controller/cinder
./conf.sh /etc/cinder/cinder.conf DEFAULT transport_url rabbit://openstack:password@controller
./conf.sh /etc/cinder/cinder.conf DEFAULT auth_strategy keystone
./conf.sh /etc/cinder/cinder.conf DEFAULT my_ip 10.10.10.54
./conf.sh /etc/cinder/cinder.conf DEFAULT enabled_backends lvm-ssd,lvm-hdd
./conf.sh /etc/cinder/cinder.conf DEFAULT glance_api_servers http://controller:9292
./conf.sh /etc/cinder/cinder.conf keystone_authtoken www_authenticate_uri http://controller:5000
./conf.sh /etc/cinder/cinder.conf keystone_authtoken auth_url http://controller:5000
./conf.sh /etc/cinder/cinder.conf keystone_authtoken memcached_servers controller:11211
./conf.sh /etc/cinder/cinder.conf keystone_authtoken auth_type password
./conf.sh /etc/cinder/cinder.conf keystone_authtoken project_domain_name default
./conf.sh /etc/cinder/cinder.conf keystone_authtoken user_domain_name default
./conf.sh /etc/cinder/cinder.conf keystone_authtoken project_name service
./conf.sh /etc/cinder/cinder.conf keystone_authtoken username cinder
./conf.sh /etc/cinder/cinder.conf keystone_authtoken password password
./conf.sh /etc/cinder/cinder.conf backend_default volume_driver cinder.volume.drivers.lvm.LVMVolumeDriver
./conf.sh /etc/cinder/cinder.conf backend_default target_protocol iscsi
./conf.sh /etc/cinder/cinder.conf backend_default target_helper lioadm
./conf.sh /etc/cinder/cinder.conf lvm-ssd volume_group cindervols-ssd
./conf.sh /etc/cinder/cinder.conf lvm-ssd volume_backend_name LVM-SSD
./conf.sh /etc/cinder/cinder.conf lvm-hdd volume_group cindervols-hdd
./conf.sh /etc/cinder/cinder.conf lvm-hdd volume_backend_name LVM-HDD
./conf.sh /etc/cinder/cinder.conf oslo_concurrency lock_path /var/lib/cinder/tmp

# enable and start services
for i in enable start;do systemctl $i openstack-cinder-volume target;done

#-------------------
# => controller node
#-------------------

# verifications

source ~/adminrc

openstack volume service list

###############################
# - PART 8: SWIFT INSTALLATION
###############################

#-------------------
# => controller node
#-------------------

# create user, add role, create services and endpoints

source ~/adminrc

openstack user create --domain default --password password swift

openstack role add --project service --user swift admin

openstack service create --name swift --description "OpenStack Object Storage" object-store

./endpoint.sh object-store 8080/v1/AUTH_%\(project_id\)s

# install packages

yum -y install openstack-swift-proxy python-swiftclient python-keystoneclient python-keystonemiddleware memcached

# archive old proxy-server.conf file

cp -p /etc/swift/proxy-server.conf /etc/swift/proxy-server.conf.orig

# download new proxy-server.conf file

curl -o /etc/swift/proxy-server.conf https://opendev.org/openstack/swift/raw/branch/stable/stein/etc/proxy-server.conf-sample

# swap pipelines before working on conf file

sed -i -e '/^pipeline/ s/^p/#p/' -e '/^#pipeline.*authtoken/ s/^#//' /etc/swift/proxy-server.conf

# conf file work

./bak.sh /etc/swift/proxy-server.conf

./conf.sh /etc/swift/proxy-server.conf DEFAULT bind_port 8080
./conf.sh /etc/swift/proxy-server.conf DEFAULT user swift
./conf.sh /etc/swift/proxy-server.conf DEFAULT swift_dir /etc/swift
sed -i '/^pipeline/ s/temp[^ ]* //' /etc/swift/proxy-server.conf
./conf.sh /etc/swift/proxy-server.conf app:proxy-server use egg:swift#proxy
./conf.sh /etc/swift/proxy-server.conf app:proxy-server account_autocreate True
./conf.sh /etc/swift/proxy-server.conf filter:keystoneauth use egg:swift#keystoneauth
./conf.sh /etc/swift/proxy-server.conf filter:keystoneauth operator_roles admin,member
./conf.sh /etc/swift/proxy-server.conf filter:authtoken paste.filter_factory keystonemiddleware.auth_token:filter_factory
./conf.sh /etc/swift/proxy-server.conf filter:authtoken www_authenticate_uri http://controller:5000
./conf.sh /etc/swift/proxy-server.conf filter:authtoken auth_url http://controller:5000
./conf.sh /etc/swift/proxy-server.conf filter:authtoken memcached_servers controller:11211
./conf.sh /etc/swift/proxy-server.conf filter:authtoken auth_type password
./conf.sh /etc/swift/proxy-server.conf filter:authtoken project_domain_id default
./conf.sh /etc/swift/proxy-server.conf filter:authtoken user_domain_id default
./conf.sh /etc/swift/proxy-server.conf filter:authtoken project_name service
./conf.sh /etc/swift/proxy-server.conf filter:authtoken username swift
./conf.sh /etc/swift/proxy-server.conf filter:authtoken password password
./conf.sh /etc/swift/proxy-server.conf filter:authtoken delay_auth_decision True
./conf.sh /etc/swift/proxy-server.conf filter:cache use egg:swift#memcache
./conf.sh /etc/swift/proxy-server.conf filter:cache memcache_servers controller:11211

#---------------
# => object node
#---------------

# install prereq packages

yum -y install xfsprogs rsync

# prepare disks, create mount points, add to fstab, and mount

for i in b c d;do
  mkfs.xfs /dev/vd$i;done
  mkdir -p /srv/node/vd$i
  echo /dev/vd$i /srv/node/vd$i xfs noatime,nodiratime,nobarrier,logbufs=8 0 2 >> /etc/fstab
  mount /srv/node/vd$i
done

cat << EOF >> /etc/rsyncd.conf
uid = swift
gid = swift
log file = /var/log/rsyncd.log
pid file = /var/run/rsyncd.pid
address = 10.10.10.55

[account]
max connections = 2
path = /srv/node/
read only = False
lock file = /var/lock/account.lock

[container]
max connections = 2
path = /srv/node/
read only = False
lock file = /var/lock/container.lock

[object]
max connections = 2
path = /srv/node/
read only = False
lock file = /var/lock/object.lock
EOF

# enable and start services

for i in enable start;do systemctl $i rsyncd;done

# install packages

yum -y install openstack-swift-account openstack-swift-container openstack-swift-object

# archive original conf files and download new ones

for i in account container object;do
  cp -p /etc/swift/$i-server.conf /etc/swift/$i-server.conf.orig
  curl -o /etc/swift/$i-server.conf https://opendev.org/openstack/swift/raw/branch/stable/stein/etc/$i-server.conf-sample
done

# conf file work

./bak.sh /etc/swift/account-server.conf

./conf.sh /etc/swift/account-server.conf DEFAULT bind_ip 10.10.10.55
./conf.sh /etc/swift/account-server.conf DEFAULT bind_port 6202
./conf.sh /etc/swift/account-server.conf DEFAULT user swift
./conf.sh /etc/swift/account-server.conf DEFAULT swift_dir /etc/swift
./conf.sh /etc/swift/account-server.conf DEFAULT devices /srv/node
./conf.sh /etc/swift/account-server.conf DEFAULT mount_check True
./conf.sh /etc/swift/account-server.conf pipeline:main pipeline 'healthcheck recon account-server'
./conf.sh /etc/swift/account-server.conf filter:recon use egg:swift#recon
./conf.sh /etc/swift/account-server.conf filter:recon recon_cache_path /var/cache/swift

./bak.sh /etc/swift/container-server.conf

./conf.sh /etc/swift/container-server.conf DEFAULT bind_ip 10.10.10.55
./conf.sh /etc/swift/container-server.conf DEFAULT bind_port 6201
./conf.sh /etc/swift/container-server.conf DEFAULT user swift
./conf.sh /etc/swift/container-server.conf DEFAULT swift_dir /etc/swift
./conf.sh /etc/swift/container-server.conf DEFAULT devices /srv/node
./conf.sh /etc/swift/container-server.conf DEFAULT mount_check True
./conf.sh /etc/swift/container-server.conf pipeline:main pipeline 'healthcheck recon container-server'
./conf.sh /etc/swift/container-server.conf filter:recon use egg:swift#recon
./conf.sh /etc/swift/container-server.conf filter:recon recon_cache_path /var/cache/swift

./bak.sh /etc/swift/object-server.conf

./conf.sh /etc/swift/object-server.conf DEFAULT bind_ip 10.10.10.55
./conf.sh /etc/swift/object-server.conf DEFAULT bind_port 6200
./conf.sh /etc/swift/object-server.conf DEFAULT user swift
./conf.sh /etc/swift/object-server.conf DEFAULT swift_dir /etc/swift
./conf.sh /etc/swift/object-server.conf DEFAULT devices /srv/node
./conf.sh /etc/swift/object-server.conf DEFAULT mount_check True
./conf.sh /etc/swift/object-server.conf pipeline:main pipeline 'healthcheck recon object-server'
./conf.sh /etc/swift/object-server.conf filter:recon use egg:swift#recon
./conf.sh /etc/swift/object-server.conf filter:recon recon_cache_path /var/cache/swift

# set permissions

chown -R swift:swift /srv/node

# make sure cache dir is created and permissions are set

mkdir -p /var/cache/swift
chown -R root:swift /var/cache/swift
chmod -R 775 /var/cache/swift

#-------------------
# => controller node
#-------------------

# create initial rings

cd /etc/swift

swift-ring-builder account.builder create 10 3 1
for i in b c d;do swift-ring-builder account.builder add --region 1 --zone 1 --ip 10.10.10.55 --port 6202 --device vd$i --weight 100;done
swift-ring-builder account.builder rebalance
swift-ring-builder account.builder

swift-ring-builder container.builder create 10 3 1
for i in b c d;do swift-ring-builder container.builder add --region 1 --zone 1 --ip 10.10.10.55 --port 6201 --device vd$i --weight 100;done
swift-ring-builder container.builder rebalance
swift-ring-builder container.builder

swift-ring-builder object.builder create 10 3 1
for i in b c d;do swift-ring-builder object.builder add --region 1 --zone 1 --ip 10.10.10.55 --port 6200 --device vd$i --weight 100;done
swift-ring-builder object.builder rebalance
swift-ring-builder object.builder

cd ~

# distribute ring files to object node

scp /etc/swift/*.gz object:/etc/swift/

# back up swift.conf file and download new one

cp -p /etc/swift/swift.conf /etc/swift/swift.conf.orig
curl -o /etc/swift/swift.conf https://opendev.org/openstack/swift/raw/branch/stable/stein/etc/swift.conf-sample

# conf file work

./bak.sh /etc/swift/swift.conf

./conf.sh /etc/swift/swift.conf swift-hash swift_hash_path_suffix swifthashsuffix
./conf.sh /etc/swift/swift.conf swift-hash swift_hash_path_prefix swifthashprefix
./conf.sh /etc/swift/swift.conf storage-policy:0 name Policy-0
./conf.sh /etc/swift/swift.conf storage-policy:0 default yes

# distribute swift.conf to object node

scp /etc/swift/swift.conf object:/etc/swift/

# ensure proper ownership of swift dir

chown -R root:swift /etc/swift

# start services

for i in enable start;do systemctl $i openstack-swift-proxy memcached;done

#---------------
# => object node
#---------------

# ensure proper ownership of swift dir

chown -R root:swift /etc/swift

# fix selinux

chcon -R system_u:object_r:swift_data_t:s0 /srv/node

for i in enable start;do systemctl $i openstack-swift-account{,-auditor,-reaper,-replicator};done
for i in enable start;do systemctl $i openstack-swift-container{,-auditor,-replicator,-updater};done
for i in enable start;do systemctl $i openstack-swift-object{,-auditor,-replicator,-updater};done

#-------------------
# => controller node
#-------------------

# some verifications

source ~/dqueenrc

swift stat
openstack container create container1
echo "swift test file" > swiftfile.txt
openstack object create container1 swiftfile.txt
openstack object list container1
rm -f swiftfile.txt
openstack object save container1 swiftfile.txt
cat swiftfile.txt
rm -f swiftfile.txt
openstack object delete container1 swiftfile.txt
openstack container delete container1

########################################
# - PART 9: RECONFIG GLANCE TO USE SWIFT
########################################

#-------------------
# => controller node
#-------------------

# conf file work

./conf.sh /etc/glance/glance-api.conf glance_store stores swift,file,http
./conf.sh /etc/glance/glance-api.conf glance_store default_store swift
./conf.sh /etc/glance/glance-api.conf glance_store swift_store_create_container_on_put True


#######################################
# - OPTION A: SINGLE TENANT
# (all images stored in service account
#######################################

# conf file work

./conf.sh /etc/glance/glance-api.conf glance_store default_swift_reference glance-swift
./conf.sh /etc/glance/glance-api.conf glance_store swift_store_config_file /etc/glance/glance-swift.conf

cat << EOF >> /etc/glance/glance-swift.conf
[glance-swift]
user = service:glance
key = password
user_domain_id = default
project_domain_id = default
auth_version = 3
auth_address = http://controller:5000/v3
EOF

# restart api

systemctl restart openstack-glance-api

###################################
# - OPTION B: MULTI TENANT
# (images stored in tenant account)
###################################

# conf file work

./conf.sh /etc/glance/glance-api.conf glance_store swift_store_multi_tenant True

# restart api

systemctl restart openstack-glance-api

#############################################
# - PART 10: ENABLE CINDER TO BACKUP TO SWIFT
#############################################

#--------------
# => block node
#--------------

# ensure package installed

yum -y install openstack-cinder

# conf file work

./conf.sh /etc/cinder/cinder.conf DEFAULT backup_driver cinder.backup.drivers.swift.SwiftBackupDriver
./conf.sh /etc/cinder/cinder.conf DEFAULT backup_swift_url http://controller:8080/v1/AUTH_

# enable and start backup service

for i in enable start;do systemctl $i openstack-cinder-backup;done

#-------------------
# => controller node
#-------------------

# enable backup feature in horizon

sed -i '/OPENSTACK_CINDER_FEATURES/,/\}/ s/False/True/' /etc/openstack-dashboard/local_settings

systemctl reload httpd

##############################
# - PART 11: HEAT INSTALLATION
##############################

#-------------------
# => controller node
#-------------------

# create database

./dbcreate.sh heat heat password

# create projects, users, roles, domains, endpoints, etc

source ~/adminrc

openstack user create --domain default --password password heat

openstack role add --project service --user heat admin

openstack service create --name heat --description "Orchestration" orchestration

openstack service create --name heat-cfn --description "Orchestration"  cloudformation

./endpoint.sh orchestration 8004/v1/%\(tenant_id\)s

./endpoint.sh cloudformation 8000/v1

openstack domain create --description "Stack projects and users" heat

openstack user create --domain heat --password password heat_domain_admin

openstack role add --domain heat --user-domain heat --user heat_domain_admin admin

openstack role create heat_stack_owner

openstack role add --project learnoss --user dqueen heat_stack_owner

openstack role create heat_stack_user

# install packages

yum -y install openstack-heat-api openstack-heat-api-cfn openstack-heat-engine

# conf file work

./bak.sh /etc/heat/heat.conf

./conf.sh /etc/heat/heat.conf database connection mysql+pymysql://heat:password@controller/heat
./conf.sh /etc/heat/heat.conf DEFAULT transport_url rabbit://openstack:password@controller
./conf.sh /etc/heat/heat.conf DEFAULT heat_metadata_server_url http://controller:8000
./conf.sh /etc/heat/heat.conf DEFAULT heat_waitcondition_server_url http://controller:8000/v1/waitcondition
./conf.sh /etc/heat/heat.conf DEFAULT stack_domain_admin heat_domain_admin
./conf.sh /etc/heat/heat.conf DEFAULT stack_domain_admin_password password
./conf.sh /etc/heat/heat.conf DEFAULT stack_user_domain_name heat
./conf.sh /etc/heat/heat.conf keystone_authtoken auth_uri http://controller:5000
./conf.sh /etc/heat/heat.conf keystone_authtoken auth_url http://controller:5000
./conf.sh /etc/heat/heat.conf keystone_authtoken memcached_servers controller:11211
./conf.sh /etc/heat/heat.conf keystone_authtoken auth_type password
./conf.sh /etc/heat/heat.conf keystone_authtoken project_domain_name default
./conf.sh /etc/heat/heat.conf keystone_authtoken user_domain_name default
./conf.sh /etc/heat/heat.conf keystone_authtoken project_name service
./conf.sh /etc/heat/heat.conf keystone_authtoken username heat
./conf.sh /etc/heat/heat.conf keystone_authtoken password password
./conf.sh /etc/heat/heat.conf trustee auth_type password
./conf.sh /etc/heat/heat.conf trustee auth_url http://controller:5000
./conf.sh /etc/heat/heat.conf trustee username heat
./conf.sh /etc/heat/heat.conf trustee password password
./conf.sh /etc/heat/heat.conf trustee user_domain_name default
./conf.sh /etc/heat/heat.conf clients_keystone auth_uri http://controller:5000

# populate database

su -s /bin/sh -c "heat-manage db_sync" heat

# enable and start services

for i in enable start;do systemctl $i openstack-heat-{api{,-cfn},engine};done

# verifications

source ~/adminrc

openstack orchestration service list

# install heat dashboard packages

yum -y install openstack-heat-ui

# reload apache

systemctl reload httpd

################################
# - PART 12: MANILA INSTALLATION
################################

# NOTES: Manila can be installed two ways.
# Option A: probably best suited when only flat networks are used.
#  - If you use a flat network for intances and they can reach the
#    manila server, then set the export ip to the manila mgmt ip.
#  - If you insist on tenant networks, you will need to attach a second
#    interface of a flat network to reach the export ip. Could be the
#    mgmt network or a service network.
# Option B is probably better when tenant/overlay networks are used.
#  - Share networks are created that map to tenant network.

#-------------------
# => controller node
#-------------------

# create database

./dbcreate.sh manila manila password

# create user, add role, create services and endpoints

source ~/adminrc

openstack user create --domain default --password password manila

openstack role add --project service --user manila admin

openstack service create --name manila --description "OpenStack Shared File Systems" share

openstack service create --name manilav2 --description "OpenStack Shared File Systems V2" sharev2

./endpoint.sh share 8786/v1/%\(tenant_id\)s

./endpoint.sh sharev2 8786/v2/%\(tenant_id\)s

# install packages

yum -y install openstack-manila python-manilaclient

# conf file work

./bak.sh /etc/manila/manila.conf

./conf.sh /etc/manila/manila.conf database connection mysql+pymysql://manila:password@controller/manila
./conf.sh /etc/manila/manila.conf DEFAULT transport_url rabbit://openstack:password@controller
./conf.sh /etc/manila/manila.conf DEFAULT default_share_type default_share_type
./conf.sh /etc/manila/manila.conf DEFAULT share_name_template share-%s
./conf.sh /etc/manila/manila.conf DEFAULT rootwrap_config /etc/manila/rootwrap.conf
./conf.sh /etc/manila/manila.conf DEFAULT api_paste_config /etc/manila/api-paste.ini
./conf.sh /etc/manila/manila.conf DEFAULT auth_strategy keystone
./conf.sh /etc/manila/manila.conf DEFAULT my_ip 10.10.10.51
./conf.sh /etc/manila/manila.conf keystone_authtoken memcached_servers controller:11211
./conf.sh /etc/manila/manila.conf keystone_authtoken www_authenticate_uri http://controller:5000
./conf.sh /etc/manila/manila.conf keystone_authtoken auth_url http://controller:5000
./conf.sh /etc/manila/manila.conf keystone_authtoken auth_type password
./conf.sh /etc/manila/manila.conf keystone_authtoken project_domain_name Default
./conf.sh /etc/manila/manila.conf keystone_authtoken user_domain_name Default
./conf.sh /etc/manila/manila.conf keystone_authtoken project_name service
./conf.sh /etc/manila/manila.conf keystone_authtoken username manila
./conf.sh /etc/manila/manila.conf keystone_authtoken password password
./conf.sh /etc/manila/manila.conf oslo_concurrency lock_path /var/lib/manila/tmp

# populate database

su -s /bin/sh -c "manila-manage db sync" manila

# enable and start services

for i in enable start;do systemctl $i openstack-manila-{api,scheduler};done

#--------------
# => share node
#--------------

# install packages

yum -y install openstack-manila-share python2-PyMySQL

# conf file work

./bak.sh /etc/manila/manila.conf

./conf.sh /etc/manila/manila.conf database connection mysql+pymysql://manila:password@controller/manila
./conf.sh /etc/manila/manila.conf DEFAULT transport_url rabbit://openstack:password@controller
./conf.sh /etc/manila/manila.conf DEFAULT default_share_type default_share_type
./conf.sh /etc/manila/manila.conf DEFAULT rootwrap_config /etc/manila/rootwrap.conf
./conf.sh /etc/manila/manila.conf DEFAULT auth_strategy = keystone
./conf.sh /etc/manila/manila.conf DEFAULT my_ip 10.10.10.57
./conf.sh /etc/manila/manila.conf keystone_authtoken memcached_servers controller:11211
./conf.sh /etc/manila/manila.conf keystone_authtoken www_authenticate_uri http://controller:5000
./conf.sh /etc/manila/manila.conf keystone_authtoken auth_url http://controller:5000
./conf.sh /etc/manila/manila.conf keystone_authtoken auth_type password
./conf.sh /etc/manila/manila.conf keystone_authtoken project_domain_name Default
./conf.sh /etc/manila/manila.conf keystone_authtoken user_domain_name Default
./conf.sh /etc/manila/manila.conf keystone_authtoken project_name service
./conf.sh /etc/manila/manila.conf keystone_authtoken username manila
./conf.sh /etc/manila/manila.conf keystone_authtoken password password
./conf.sh /etc/manila/manila.conf oslo_concurrency lock_path /var/lib/manila/tmp

#######################################
# - OPTION A: DHSS=False
# (only manages share provisioning)
# (done on block node or any node or
# any node not running neutron agents)
# (using lvm driver)
#######################################

#--------------
# => share node
#--------------

# install packages

yum -y install lvm2 nfs-utils nfs4-acl-tools portmap targetcli

# start core services

for i in enable start;do systemctl $i lvm2-lvmetad target;done

pvcreate /dev/vd{b,c}

vgcreate manila-volumes /dev/vd{b,c}

# reconfig lvm.conf

l=$(sed -n '/# filter = /=' /etc/lvm/lvm.conf|tail -n1);sed -i "${l}a filter = [ 'a|vda|','a|vdb|','a|vdc|','r|.*|' ]" /etc/lvm/lvm.conf

# conf file work

./conf.sh /etc/manila/manila.conf DEFAULT enabled_share_backends lvm
./conf.sh /etc/manila/manila.conf DEFAULT enabled_share_protocols NFS
./conf.sh /etc/manila/manila.conf lvm share_backend_name LVM
./conf.sh /etc/manila/manila.conf lvm share_driver manila.share.drivers.lvm.LVMShareDriver
./conf.sh /etc/manila/manila.conf lvm driver_handles_share_servers False
./conf.sh /etc/manila/manila.conf lvm lvm_share_volume_group manila-volumes
./conf.sh /etc/manila/manila.conf lvm lvm_share_export_ip 172.6.0.3

# ensure system dirs created correctly

mkdir /var/lib/manila
chown manila:manila /var/lib/manila

# start service

for i in enable start;do systemctl $i nfs-server openstack-manila-share;done

#-------------------
# => controller node
#-------------------

# create default share type

manila type-create default_share_type False

#######################################
# - OPTION B: DHSS=True
# (provisions share servers per tenant)
# (done one node w/ neutron agents
# do not use lvm driver)
# (using generic driver)
#######################################

#-------------------
# => controller node
#-------------------

# obtain and upload manila image (optionally, build a custom one with diskimage-builder)

wget http://tarballs.openstack.org/manila-image-elements/images/manila-service-image-master.qcow2

source adminrc

openstack image create "manila-service-image" --file manila-service-image-master.qcow2 --disk-format qcow2 --container-format bare --public

# create flavor for manila to use

openstack flavor create s1.manila --ram 256 --disk 0 --vcpus 1 --id 100

#--------------
# => share node
#--------------

# install packages

yum -y install openstack-neutron openstack-neutron-openvswitch libibverbs ebtables

# conf file work

./conf.sh /etc/manila/manila.conf DEFAULT enabled_share_backends generic
./conf.sh /etc/manila/manila.conf DEFAULT enabled_share_protocols NFS
./conf.sh /etc/manila/manila.conf neutron url http://controller:9696
./conf.sh /etc/manila/manila.conf neutron www_authenticate_uri http://controller:5000
./conf.sh /etc/manila/manila.conf neutron auth_url http://controller:5000
./conf.sh /etc/manila/manila.conf neutron memcached_servers controller:11211
./conf.sh /etc/manila/manila.conf neutron auth_type password
./conf.sh /etc/manila/manila.conf neutron project_domain_name Default
./conf.sh /etc/manila/manila.conf neutron user_domain_name Default
./conf.sh /etc/manila/manila.conf neutron region_name RegionOne
./conf.sh /etc/manila/manila.conf neutron project_name service
./conf.sh /etc/manila/manila.conf neutron username neutron
./conf.sh /etc/manila/manila.conf neutron password password
./conf.sh /etc/manila/manila.conf nova www_authenticate_uri http://controller:5000
./conf.sh /etc/manila/manila.conf nova auth_url http://controller:5000
./conf.sh /etc/manila/manila.conf nova memcached_servers controller:11211
./conf.sh /etc/manila/manila.conf nova auth_type password
./conf.sh /etc/manila/manila.conf nova project_domain_name Default
./conf.sh /etc/manila/manila.conf nova user_domain_name Default
./conf.sh /etc/manila/manila.conf nova region_name RegionOne
./conf.sh /etc/manila/manila.conf nova project_name service
./conf.sh /etc/manila/manila.conf nova username nova
./conf.sh /etc/manila/manila.conf nova password password
./conf.sh /etc/manila/manila.conf cinder www_authenticate_uri http://controller:5000
./conf.sh /etc/manila/manila.conf cinder auth_url http://controller:5000
./conf.sh /etc/manila/manila.conf cinder memcached_servers controller:11211
./conf.sh /etc/manila/manila.conf cinder auth_type password
./conf.sh /etc/manila/manila.conf cinder project_domain_name Default
./conf.sh /etc/manila/manila.conf cinder user_domain_name Default
./conf.sh /etc/manila/manila.conf cinder region_name RegionOne
./conf.sh /etc/manila/manila.conf cinder project_name service
./conf.sh /etc/manila/manila.conf cinder username cinder
./conf.sh /etc/manila/manila.conf cinder password password
./conf.sh /etc/manila/manila.conf generic share_backend_name GENERIC
./conf.sh /etc/manila/manila.conf generic share_driver manila.share.drivers.generic.GenericShareDriver
./conf.sh /etc/manila/manila.conf generic driver_handles_share_servers True
./conf.sh /etc/manila/manila.conf generic service_instance_flavor_id 100
./conf.sh /etc/manila/manila.conf generic service_image_name manila-service-image
./conf.sh /etc/manila/manila.conf generic service_instance_user manila
./conf.sh /etc/manila/manila.conf generic service_instance_password manila
./conf.sh /etc/manila/manila.conf generic interface_driver manila.network.linux.interface.OVSInterfaceDriver

for i in enable start;do systemctl $i openvswitch neutron-openvswitch-agent openstack-manila-share;done

#-------------------
# => controller node
#-------------------

# create default share type

manila type-create default_share_type True

###############
## BOTH OPTIONS
###############

#-------------------
# => controller node
#-------------------

# verification

source ~/adminrc

manila service-list

# install manila dashbard packages

yum -y install openstack-manila-ui

#############################################################
########### END OF GUIDE. I HOPE YOU ENJOYED IT!! ###########
#############################################################
# This guide is a living document, so I will continue to
# update it adding new features and such. Check back for more
#############################################################







